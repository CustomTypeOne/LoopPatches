diff --git a/Loop/Managers/DoseMath.swift b/Loop/Managers/DoseMath.swift
index 01c9bedf..f178c849 100644
--- a/Loop/Managers/DoseMath.swift
+++ b/Loop/Managers/DoseMath.swift
@@ -9,6 +9,7 @@
 import Foundation
 import HealthKit
 import LoopKit
+import LoopCore
 
 
 private enum InsulinCorrection {
@@ -391,13 +392,31 @@ extension Collection where Element: GlucoseValue {
             maxBasalRate = scheduledBasalRate
         }
 
-        let temp = correction?.asTempBasal(
+        var temp = correction?.asTempBasal(
             scheduledBasalRate: scheduledBasalRate,
             maxBasalRate: maxBasalRate,
             duration: duration,
             rateRounder: rateRounder
         )
 
+        // Basal Lock threshold - Jon Fawcett
+        let basalLockEnabled = UserDefaults.standard.bool(forKey: "basalLockEnabled")
+        let basalLockThreshold = UserDefaults.standard.double(forKey: "basalLockThreshold")
+        let basalLockIgnoreSuspend = UserDefaults.standard.bool(forKey: "basalLockIgnoreSuspend")
+        let glucoseUnit = UserDefaults.standard.string(forKey: "settingsGlucoseUnit")
+        let hkUnit = glucoseUnit == HKUnit.millimolesPerLiter.unitString ? HKUnit.millimolesPerLiter : HKUnit.milligramsPerDeciliter
+
+        if (basalLockEnabled && basalLockThreshold != 0) {
+            if (( temp?.unitsPerHour ?? scheduledBasalRate < scheduledBasalRate  ||
+                 lastTempBasal?.unitsPerHour ?? scheduledBasalRate < scheduledBasalRate
+                 ) &&
+                 self[0 as! Self.Index].quantity > HKQuantity(unit : hkUnit, doubleValue: basalLockThreshold))
+            {
+                print("####### Temp Basal Lock On #########")
+                temp = TempBasalRecommendation(unitsPerHour: scheduledBasalRate, duration: 1800)
+            }
+        }
+
         return temp?.ifNecessary(
             at: date,
             scheduledBasalRate: scheduledBasalRate,
@@ -481,6 +500,25 @@ extension Collection where Element: GlucoseValue {
             volumeRounder: volumeRounder
         )
 
+        // Basal Lock threshold - Jon Fawcett
+        let basalLockEnabled = UserDefaults.standard.bool(forKey: "basalLockEnabled")
+        let basalLockThreshold = UserDefaults.standard.double(forKey: "basalLockThreshold")
+        let glucoseUnit = UserDefaults.standard.string(forKey: "settingsGlucoseUnit")
+        let hkUnit = glucoseUnit == HKUnit.millimolesPerLiter.unitString ? HKUnit.millimolesPerLiter : HKUnit.milligramsPerDeciliter
+
+        print("####### Basal Lock Start Code #######")
+        print(temp?.unitsPerHour)
+        if (basalLockEnabled && basalLockThreshold != 0) {
+            if ( (temp?.unitsPerHour ?? scheduledBasalRate < scheduledBasalRate ||
+                  lastTempBasal?.unitsPerHour ?? scheduledBasalRate < scheduledBasalRate
+                  ) &&
+                 self[0 as! Self.Index].quantity > HKQuantity(unit : hkUnit, doubleValue: basalLockThreshold))
+            {
+                temp = TempBasalRecommendation(unitsPerHour: scheduledBasalRate, duration: 1800)
+                print("####### Temp Basal Lock On #########")
+            }
+        }
+
         if temp != nil || bolusUnits > 0 {
             return AutomaticDoseRecommendation(basalAdjustment: temp, bolusUnits: bolusUnits)
         }
diff --git a/Loop/Managers/LoopDataManager.swift b/Loop/Managers/LoopDataManager.swift
index 5fd31fa5..0ca034af 100644
--- a/Loop/Managers/LoopDataManager.swift
+++ b/Loop/Managers/LoopDataManager.swift
@@ -1596,8 +1596,37 @@ extension LoopDataManager {
 
             let dosingRecommendation: AutomaticDoseRecommendation?
 
-            switch settings.automaticDosingStrategy {
-            case .automaticBolus:
+            // Dynamic Application Factor and Strategy Switching
+
+            // Set to the hard coded 0.4
+            var alternateApplicationFactor = LoopConstants.bolusPartialApplicationFactor;
+
+            let alternatePAFEnabled = UserDefaults.standard.bool(forKey: "alternatePAFEnabled")
+            let alternatePAFSetting = UserDefaults.standard.double(forKey: "alternatePAFSetting")
+
+            let dosingStrategyAutomationEnabled = UserDefaults.standard.bool(forKey: "dosingStrategyAutomationEnabled")
+            let dosingStrategyThreshold = UserDefaults.standard.double(forKey: "dosingStrategyThreshold")
+
+            if (alternatePAFEnabled && alternatePAFSetting != 0) {
+                alternateApplicationFactor = alternatePAFSetting
+            }
+
+            var switcherIsAB = false;
+
+            if (dosingStrategyAutomationEnabled && dosingStrategyThreshold != 0) {
+                if( glucose.quantity > HKQuantity(unit : settings.glucoseUnit ?? .milligramsPerDeciliter, doubleValue: dosingStrategyThreshold) && settings.automaticDosingStrategy == .automaticBolus){
+                     switcherIsAB = true;
+                 } else {
+                     switcherIsAB = false;
+                 }
+            } else if (settings.automaticDosingStrategy == .automaticBolus) {
+                switcherIsAB = true;
+            }
+
+            UserDefaults.standard.set(settings.glucoseUnit?.unitString ?? HKUnit.milligramsPerDeciliter.unitString, forKey: "settingsGlucoseUnit")
+
+            switch switcherIsAB {
+            case true:
                 let volumeRounder = { (_ units: Double) in
                     return self.delegate?.loopDataManager(self, roundBolusVolume: units) ?? units
                 }
@@ -1609,14 +1638,14 @@ extension LoopDataManager {
                     sensitivity: insulinSensitivity!,
                     model: doseStore.insulinModelProvider.model(for: pumpInsulinType),
                     basalRates: basalRates!,
-                    maxAutomaticBolus: maxBolus! * LoopConstants.bolusPartialApplicationFactor,
-                    partialApplicationFactor: LoopConstants.bolusPartialApplicationFactor,
+                    maxAutomaticBolus: maxBolus! * alternateApplicationFactor,
+                    partialApplicationFactor: alternateApplicationFactor,
                     lastTempBasal: lastTempBasal,
                     volumeRounder: volumeRounder,
                     rateRounder: rateRounder,
                     isBasalRateScheduleOverrideActive: settings.scheduleOverride?.isBasalRateScheduleOverriden(at: startDate) == true
                 )
-            case .tempBasalOnly:
+            case false:
                 let temp = predictedGlucose.recommendedTempBasal(
                     to: glucoseTargetRange!,
                     at: predictedGlucose[0].startDate,
diff --git a/LoopUI/Charts/COBChart.swift b/LoopUI/Charts/COBChart.swift
index b8fbfd8f..7c956ddd 100644
--- a/LoopUI/Charts/COBChart.swift
+++ b/LoopUI/Charts/COBChart.swift
@@ -63,6 +63,16 @@ public extension COBChart {
         // Grid lines
         let gridLayer = ChartGuideLinesForValuesLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, settings: guideLinesLayerSettings, axisValuesX: Array(xAxisValues.dropFirst().dropLast()), axisValuesY: yAxisValues)
 
+        // read from Settings->Loop, restart required
+        let addNowMarker = UserDefaults.standard.bool(forKey: "addNowMarkerToCharts")
+
+        var currentTimeSettings = ChartGuideLinesLayerSettings(linesColor: UIColor.carbTintColor, linesWidth: 0.0)
+        let currentTimeValue = ChartAxisValueDate(date: Date(),  formatter: { _ in "" })
+        if addNowMarker {
+            currentTimeSettings = ChartGuideLinesLayerSettings(linesColor: UIColor.carbTintColor, linesWidth: 1.0)
+        }
+        let currentTimeLayer = ChartGuideLinesForValuesLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, settings: currentTimeSettings, axisValuesX: [currentTimeValue], axisValuesY: [])
+
         if gestureRecognizer != nil {
             cobChartCache = ChartPointsTouchHighlightLayerViewCache(
                 xAxisLayer: xAxisLayer,
@@ -76,6 +86,7 @@ public extension COBChart {
 
         let layers: [ChartLayer?] = [
             gridLayer,
+            currentTimeLayer,
             xAxisLayer,
             yAxisLayer,
             cobChartCache?.highlightLayer,
diff --git a/LoopUI/Charts/DoseChart.swift b/LoopUI/Charts/DoseChart.swift
index a2558511..8ddd6191 100644
--- a/LoopUI/Charts/DoseChart.swift
+++ b/LoopUI/Charts/DoseChart.swift
@@ -106,6 +106,16 @@ public extension DoseChart {
         // Grid lines
         let gridLayer = ChartGuideLinesForValuesLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, settings: guideLinesLayerSettings, axisValuesX: Array(xAxisValues.dropFirst().dropLast()), axisValuesY: yAxisValues)
 
+        // read from Settings->Loop, restart required
+        let addNowMarker = UserDefaults.standard.bool(forKey: "addNowMarkerToCharts")
+
+        let currentTimeValue = ChartAxisValueDate(date: Date(), formatter: { _ in "" })
+        var currentTimeSettings = ChartGuideLinesLayerSettings(linesColor: colors.insulinTint, linesWidth: 0.0)
+        if addNowMarker {
+            currentTimeSettings = ChartGuideLinesLayerSettings(linesColor: colors.insulinTint, linesWidth: 1.0)
+        }
+        let currentTimeLayer = ChartGuideLinesForValuesLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, settings: currentTimeSettings, axisValuesX: [currentTimeValue], axisValuesY: [])
+
         // 0-line
         let dummyZeroChartPoint = ChartPoint(x: ChartAxisValueDouble(0), y: ChartAxisValueDouble(0))
         let zeroGuidelineLayer = ChartPointsViewsLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, chartPoints: [dummyZeroChartPoint], viewGenerator: {(chartPointModel, layer, chart) -> UIView? in
@@ -130,6 +140,7 @@ public extension DoseChart {
 
         let layers: [ChartLayer?] = [
             gridLayer,
+            currentTimeLayer,
             xAxisLayer,
             yAxisLayer,
             zeroGuidelineLayer,
diff --git a/LoopUI/Charts/IOBChart.swift b/LoopUI/Charts/IOBChart.swift
index 256d2685..745161c8 100644
--- a/LoopUI/Charts/IOBChart.swift
+++ b/LoopUI/Charts/IOBChart.swift
@@ -62,6 +62,16 @@ public extension IOBChart {
         // Grid lines
         let gridLayer = ChartGuideLinesForValuesLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, settings: guideLinesLayerSettings, axisValuesX: Array(xAxisValues.dropFirst().dropLast()), axisValuesY: yAxisValues)
 
+        // read from Settings->Loop, restart required
+        let addNowMarker = UserDefaults.standard.bool(forKey: "addNowMarkerToCharts")
+
+        let currentTimeValue = ChartAxisValueDate(date: Date(), formatter: { _ in "" })
+        var currentTimeSettings = ChartGuideLinesLayerSettings(linesColor: colors.insulinTint, linesWidth: 0.0)
+        if addNowMarker {
+            currentTimeSettings = ChartGuideLinesLayerSettings(linesColor: colors.insulinTint, linesWidth: 1.0)
+        }
+        let currentTimeLayer = ChartGuideLinesForValuesLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, settings: currentTimeSettings, axisValuesX: [currentTimeValue], axisValuesY: [])
+
         // 0-line
         let dummyZeroChartPoint = ChartPoint(x: ChartAxisValueDouble(0), y: ChartAxisValueDouble(0))
         let zeroGuidelineLayer = ChartPointsViewsLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, chartPoints: [dummyZeroChartPoint], viewGenerator: {(chartPointModel, layer, chart) -> UIView? in
@@ -86,6 +96,7 @@ public extension IOBChart {
 
         let layers: [ChartLayer?] = [
             gridLayer,
+            currentTimeLayer,
             xAxisLayer,
             yAxisLayer,
             zeroGuidelineLayer,
diff --git a/LoopUI/Charts/PredictedGlucoseChart.swift b/LoopUI/Charts/PredictedGlucoseChart.swift
index 509302a8..cb90bd62 100644
--- a/LoopUI/Charts/PredictedGlucoseChart.swift
+++ b/LoopUI/Charts/PredictedGlucoseChart.swift
@@ -167,6 +167,16 @@ extension PredictedGlucoseChart {
         // Grid lines
         let gridLayer = ChartGuideLinesForValuesLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, settings: guideLinesLayerSettings, axisValuesX: Array(xAxisValues.dropFirst().dropLast()), axisValuesY: yAxisValues)
 
+        // read from Settings->Loop, restart required
+        let addNowMarker = UserDefaults.standard.bool(forKey: "addNowMarkerToCharts")
+
+        let currentTimeValue = ChartAxisValueDate(date: Date(), formatter: { _ in "" })
+        var currentTimeSettings = ChartGuideLinesLayerSettings(linesColor: colors.glucoseTint, linesWidth: 0.0)
+        if addNowMarker {
+            currentTimeSettings = ChartGuideLinesLayerSettings(linesColor: colors.glucoseTint, linesWidth: 1.0)
+        }
+        let currentTimeLayer = ChartGuideLinesForValuesLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, settings: currentTimeSettings, axisValuesX: [currentTimeValue], axisValuesY: [])
+
         let circles = ChartPointsScatterCirclesLayer(xAxis: xAxisLayer.axis, yAxis: yAxisLayer.axis, chartPoints: glucosePoints, displayDelay: 0, itemSize: CGSize(width: 4, height: 4), itemFillColor: colors.glucoseTint, optimized: true)
 
         var alternatePrediction: ChartLayer?
@@ -205,6 +215,7 @@ extension PredictedGlucoseChart {
 
         let layers: [ChartLayer?] = [
             gridLayer,
+            currentTimeLayer,
             targetsLayer,
             xAxisLayer,
             yAxisLayer,
